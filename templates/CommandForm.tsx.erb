import React, { useState } from 'react'

import { Outcome } from "<%= path_to_root %>/base/Outcome"

import { <%= command_name %> } from "<%= path_to_root %><%= command_generator.import_path %>"
import <%= inputs_class_name %> from "<%= path_to_root %><%= command_generator.import_path %>/Inputs"
import <%= result_class_name %> from "<%= path_to_root %><%= command_generator.import_path %>/Result"
import { Error as <%= error_class_name %> } from "<%= path_to_root %><%= command_generator.import_path %>/Errors"

<% dependency_roots.each do |dependency_root| %>
import <%= dependency_root.import_destructure %> from "<%= path_to_root %><%= dependency_root.import_path %>"
<% end %>

export default function <%= command_name %>Form (): JSX.Element {
  <% non_colliding_inputs.each do |flattened_attribute| %>
    <% if flattened_attribute.has_default? %>
      const [<%= flattened_attribute.name %>, set<%= flattened_attribute.name_upcase %>] = useState<<%= flattened_attribute.ts_type %>>(<%= flattened_attribute.ts_default %>)
    <% else %>
      const [<%= flattened_attribute.name %>, set<%= flattened_attribute.name_upcase %>] = useState<<%= flattened_attribute.ts_type %> | undefined>(undefined)
    <% end %>
  <% end %>

  const [result, setResult] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)

  function toVoid (fn: () => Promise<void>): () => void {
    return (): void => {
      void (async (): Promise<void> => { await fn() })()
    }
  }

  const run = toVoid(async (): Promise<void> => {
    <% non_colliding_inputs.each do |flattened_attribute| %>
      if (<%= flattened_attribute.name %> == null) {
        // TODO: perform some kind of validation error
        return
      }
    <% end %>

    const inputs: <%= inputs_class_name %> = <%= populated_inputs_object %>

    const command = new <%= command_name %>(inputs)

    try {
      setResult("Thinking...")
      setError(null)
      const outcome: Outcome<<%= result_class_name %>, <%= error_class_name %>> = await command.run()

      if (outcome.isSuccess()) {
        const result: <%= result_class_name %> = outcome.result
        setResult(typeof result === 'string' ? result : JSON.stringify(result))
      } else {
        setError(outcome.errorMessage)
        setResult(null)
      }
    } catch (error) {
      setError('Error executing command')
      setResult(null)
    }
  })

  return (
    <div className="CommandForm">
      <div>
        <% non_colliding_inputs.each do |flattened_attribute| %>
          <%= flattened_attribute.html_input %>
        <% end %>

        <button onClick={run}><%= command_name_english %></button>
      </div>

      {(result != null) && <p>{result}</p>}
      {(error != null) && <p className="error-message">{error}</p>}
    </div>
  )
}
